OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)


__text_start = DEFINED (__gba_multiboot) ? 0x2000000 : 0x8000000;
__eheap_end       = 0x2040000;
__iwram_start     = 0x3000000;
__iheap_end       = 0x3008000 - 0x400;
__sp_usr          = 0x3008000 - 0x100;
__sp_irq          = 0x3008000 - 0x60;
__intr_vector_buf = 0x3008000 - 4;
__sp_usr_offset   = __sp_usr - __iwram_start;
__intr_vect_offset = __intr_vector_buf - __sp_usr;

SECTIONS
{
  . = __text_start;

  .rel.plt :
  {
    *(.rel.plt)
    PROVIDE_HIDDEN (__rel_iplt_start = .);
    *(.rel.iplt)
    PROVIDE_HIDDEN (__rel_iplt_end = .);
  }

  .init :
  {
    KEEP (*(SORT_NONE(.init)))
  }

  .plt :
  {
    *(.plt) *(.plt.*) *(.iplt) *(.igot .igot.plt)
    . = ALIGN(4);   /* REQUIRED. LD is flaky without it. */
  }

  .text :
  {
    *(EXCLUDE_FILE (*text.iwram*) .text)
    *(.text.*)
    *(.stub)
    *(.gnu.warning)
    *(.gnu.linkonce.t*)
    *(.glue_7)
    *(.glue_7t)
    *(.v4_bx)
    *(.vfp11_veneer)
    . = ALIGN(4);
  } = 0xff
  __text_end = .;

  .fini :
  {
    KEEP (*(.fini))
    . = ALIGN(4);  /* REQUIRED. LD is flaky without it. */
  }

  .rodata :
  {
    *(.rodata)
    *all.rodata*(*)
    *(.roda)
    *(.rodata.*)
    *(.gnu.linkonce.r*)
    SORT(CONSTRUCTORS)
    . = ALIGN(4);
  } = 0xff

  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) }
  __exidx_start = .;
  .ARM.exidx   : { *(.ARM.exidx* .gnu.linkonce.armexidx.*) }
  __exidx_end = .; 

  .ctors :
  {
    KEEP (*crtbegin.o(.ctors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    . = ALIGN(4);
  } = 0

  .dtors :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    . = ALIGN(4);
  } = 0

  .eh_frame :
  {
    KEEP (*(.eh_frame))
    . = ALIGN(4);
  } = 0

  .gcc_except_table :
  {
    *(.gcc_except_table)
    . = ALIGN(4);
  } = 0

  /* The rest of the sections are mapped to other memory regions but should be placed after the "normal" regions in the exe */
  /* -> xxx_lma = where exe loader puts the section */
  /* -> xxx_start = where crt0 puts the section before it is accessed by user code */
  __iwram_lma = . ;

  .iwram __iwram_start : AT (__iwram_lma)
  {
    __iwram_start = ABSOLUTE(.) ;
    *(.iwram)
    *iwram.*(.text)
    . = ALIGN(4);
  } = 0xff

  __iwram_end = . ;

  .bss ALIGN(4) (NOLOAD) :
  {
   __bss_start = ABSOLUTE(.);
   __bss_start__ = ABSOLUTE(.);
   *(.dynbss)
   *(.gnu.linkonce.b*)
   *(.bss*) 
   *(COMMON)
   . = ALIGN(4);
  }

  __bss_end = . ;
  __bss_end__ = . ;

  __data_lma = __iwram_lma + SIZEOF(.iwram);

  .data ALIGN(4) : AT (__data_lma)
  {
    __data_start = ABSOLUTE(.);
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d*)
    CONSTRUCTORS
    . = ALIGN(4);
  } = 0xff

  __data_end  =  .;
  PROVIDE (edata = .);

  __iwram_overlay_start = . ;
  __iwram_overlay_lma = __data_lma + SIZEOF(.data);

  OVERLAY : NOCROSSREFS AT (__iwram_overlay_lma)
  {
     .iwram0 { *(.iwram0) . = ALIGN(4);}
     .iwram1 { *(.iwram1) . = ALIGN(4);}
     .iwram2 { *(.iwram2) . = ALIGN(4);}
     .iwram3 { *(.iwram3) . = ALIGN(4);}
     .iwram4 { *(.iwram4) . = ALIGN(4);}
     .iwram5 { *(.iwram5) . = ALIGN(4);}
     .iwram6 { *(.iwram6) . = ALIGN(4);}
     .iwram7 { *(.iwram7) . = ALIGN(4);}
     .iwram8 { *(.iwram8) . = ALIGN(4);}
     .iwram9 { *(.iwram9) . = ALIGN(4);}
  } = 0xff

  __iwram_overlay_end = . ;
  __iheap_start = . ;

  __ewram_start = DEFINED (__gba_multiboot) ? __ewram_lma : 0x2000000;
  __ewram_lma = __iwram_overlay_lma + SIZEOF(.iwram0)+SIZEOF(.iwram1)+SIZEOF(.iwram2)+SIZEOF(.iwram3)+SIZEOF(.iwram4)+SIZEOF(.iwram5)+SIZEOF(.iwram6)+SIZEOF(.iwram7)+SIZEOF(.iwram8)+SIZEOF(.iwram9);

  .ewram __ewram_start : AT (__ewram_lma)
  {
    *(.ewram)
    . = ALIGN(4);  /* REQUIRED. LD is flaky without it. */
  } = 0xff

  __ewram_end = . ;
  __ewram_overlay_start = . ;
  __ewram_overlay_lma = __ewram_lma + SIZEOF(.ewram);

  OVERLAY ALIGN(4): NOCROSSREFS AT (__ewram_overlay_lma)
  {
     .ewram0 { *(.ewram0) . = ALIGN(4);}
     .ewram1 { *(.ewram1) . = ALIGN(4);}
     .ewram2 { *(.ewram2) . = ALIGN(4);}
     .ewram3 { *(.ewram3) . = ALIGN(4);}
     .ewram4 { *(.ewram4) . = ALIGN(4);}
     .ewram5 { *(.ewram5) . = ALIGN(4);}
     .ewram6 { *(.ewram6) . = ALIGN(4);}
     .ewram7 { *(.ewram7) . = ALIGN(4);}
     .ewram8 { *(.ewram8) . = ALIGN(4);}
     .ewram9 { *(.ewram9) . = ALIGN(4);}
  } = 0xff

  __ewram_overlay_end = . ;

  __eheap_start = . ;

  _end = DEFINED (__gba_iwram_heap) ? __iheap_start : .; /* v1.3 */
  __end__ = _end ;
  PROVIDE (end = _end);

  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  .debug_line_str  0 : { *(.debug_line_str) }
  .debug_ranges  0 : { *(.debug_ranges) }
  .debug_loclists  0 : { *(.debug_loclists) }
  .debug_rnglists  0 : { *(.debug_rnglists) }
  .stack 0x80000 : { _stack = .; *(.stack) }
  .ARM.attributes 0 : { KEEP (*(.ARM.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) }
}
